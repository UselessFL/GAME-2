{
  "version": 3,
  "sources": ["../../@pixi/filter-kawase-blur/src/KawaseBlurFilter.ts", "../../@pixi/filter-drop-shadow/src/DropShadowFilter.ts"],
  "sourcesContent": ["import { vertex } from '@tools/fragments';\nimport fragment from './kawase-blur.frag';\nimport fragmentClamp from './kawase-blur-clamp.frag';\nimport { Filter, Point } from '@pixi/core';\nimport type { IPoint, CLEAR_MODES, FilterSystem, RenderTexture } from '@pixi/core';\n\ntype PixelSizeValue = IPoint | number[] | number;\n\n/**\n * A much faster blur than Gaussian blur, but more complicated to use.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/kawase-blur.png)\n *\n * @see https://software.intel.com/en-us/blogs/2014/07/15/an-investigation-of-fast-real-time-gpu-based-image-blur-algorithms\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-kawase-blur|@pixi/filter-kawase-blur}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass KawaseBlurFilter extends Filter\n{\n    private _pixelSize: Point;\n    private _clamp: boolean;\n    private _kernels: number[] = [];\n    private _blur = 4;\n    private _quality = 3;\n\n    /**\n     * @param {number|number[]} [blur=4] - The blur of the filter. Should be greater than `0`. If\n     *        value is an Array, setting kernels.\n     * @param {number} [quality=3] - The quality of the filter. Should be an integer greater than `1`.\n     * @param {boolean} [clamp=false] - Clamp edges, useful for removing dark edges\n     *        from fullscreen filters or bleeding to the edge of filterArea.\n     */\n    constructor(blur: number | number[] = 4, quality = 3, clamp = false)\n    {\n        super(vertex, clamp ? fragmentClamp : fragment);\n        this.uniforms.uOffset = new Float32Array(2);\n\n        this._pixelSize = new Point();\n        this.pixelSize = 1;\n        this._clamp = clamp;\n\n        // if `blur` is array , as kernels\n        if (Array.isArray(blur))\n        {\n            this.kernels = blur;\n        }\n        else\n        {\n            this._blur = blur;\n            this.quality = quality;\n        }\n    }\n\n    /**\n     * Overrides apply\n     * @private\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clear: CLEAR_MODES): void\n    {\n        const uvX = this._pixelSize.x / input._frame.width;\n        const uvY = this._pixelSize.y / input._frame.height;\n        let offset;\n\n        if (this._quality === 1 || this._blur === 0)\n        {\n            offset = this._kernels[0] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else\n        {\n            const renderTarget = filterManager.getFilterTexture();\n\n            let source = input;\n            let target = renderTarget;\n            let tmp;\n\n            const last = this._quality - 1;\n\n            for (let i = 0; i < last; i++)\n            {\n                offset = this._kernels[i] + 0.5;\n                this.uniforms.uOffset[0] = offset * uvX;\n                this.uniforms.uOffset[1] = offset * uvY;\n                filterManager.applyFilter(this, source, target, 1);\n\n                tmp = source;\n                source = target;\n                target = tmp;\n            }\n            offset = this._kernels[last] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, source, output, clear);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n\n    private _updatePadding()\n    {\n        this.padding = Math.ceil(this._kernels.reduce((acc, v) => acc + v + 0.5, 0));\n    }\n\n    /**\n     * Auto generate kernels by blur & quality\n     * @private\n     */\n    private _generateKernels()\n    {\n        const blur = this._blur;\n        const quality = this._quality;\n        const kernels: number[] = [blur];\n\n        if (blur > 0)\n        {\n            let k = blur;\n            const step = blur / quality;\n\n            for (let i = 1; i < quality; i++)\n            {\n                k -= step;\n                kernels.push(k);\n            }\n        }\n\n        this._kernels = kernels;\n\n        this._updatePadding();\n    }\n\n    /**\n     * The kernel size of the blur filter, for advanced usage.\n     * @default [0]\n     */\n    get kernels(): number[]\n    {\n        return this._kernels;\n    }\n    set kernels(value: number[])\n    {\n        if (Array.isArray(value) && value.length > 0)\n        {\n            this._kernels = value;\n            this._quality = value.length;\n            this._blur = Math.max(...value);\n        }\n        else\n        {\n            // if value is invalid , set default value\n            this._kernels = [0];\n            this._quality = 1;\n        }\n    }\n\n    /**\n     * Get the if the filter is clampped.\n     *\n     * @readonly\n     * @default false\n     */\n    get clamp(): boolean\n    {\n        return this._clamp;\n    }\n\n    /**\n     * Sets the pixel size of the filter. Large size is blurrier. For advanced usage.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [1, 1]\n     */\n    set pixelSize(value: PixelSizeValue)\n    {\n        if (typeof value === 'number')\n        {\n            this._pixelSize.x = value;\n            this._pixelSize.y = value;\n        }\n        else if (Array.isArray(value))\n        {\n            this._pixelSize.x = value[0];\n            this._pixelSize.y = value[1];\n        }\n        else if (value instanceof Point)\n        {\n            this._pixelSize.x = value.x;\n            this._pixelSize.y = value.y;\n        }\n        else\n        {\n            // if value is invalid , set default value\n            this._pixelSize.x = 1;\n            this._pixelSize.y = 1;\n        }\n    }\n    get pixelSize(): PixelSizeValue\n    {\n        return this._pixelSize;\n    }\n\n    /**\n     * The quality of the filter, integer greater than `1`.\n     * @default 3\n     */\n    get quality(): number\n    {\n        return this._quality;\n    }\n    set quality(value: number)\n    {\n        this._quality = Math.max(1, Math.round(value));\n        this._generateKernels();\n    }\n\n    /**\n     * The amount of blur, value greater than `0`.\n     * @default 4\n     */\n    get blur(): number\n    {\n        return this._blur;\n    }\n    set blur(value: number)\n    {\n        this._blur = value;\n        this._generateKernels();\n    }\n}\n\nexport { KawaseBlurFilter };\nexport type { PixelSizeValue };\n", "import { KawaseBlurFilter } from '@pixi/filter-kawase-blur';\nimport { vertex } from '@tools/fragments';\nimport fragment from './dropshadow.frag';\nimport { Filter, settings, DEG_TO_RAD, ObservablePoint, utils } from '@pixi/core';\nimport type { IPoint, CLEAR_MODES, FilterSystem, RenderTexture, IPointData } from '@pixi/core';\n\ntype PixelSizeValue = number | number[] | IPoint;\n\ninterface DropShadowFilterOptions\n{\n    /** @deprecated */\n    rotation?: number;\n    /** @deprecated */\n    distance?: number;\n    offset: IPointData;\n    color: number;\n    alpha: number;\n    shadowOnly: boolean;\n    blur: number;\n    quality: number;\n    kernels: number[] | null;\n    pixelSize: PixelSizeValue;\n    resolution: number;\n}\n\n/**\n * Drop shadow filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/drop-shadow.png)\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-drop-shadow|@pixi/filter-drop-shadow}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass DropShadowFilter extends Filter\n{\n    /** Default constructor options. */\n    public static readonly defaults: DropShadowFilterOptions = {\n        offset: { x: 4, y: 4 },\n        color: 0x000000,\n        alpha: 0.5,\n        shadowOnly: false,\n        kernels: null,\n        blur: 2,\n        quality: 3,\n        pixelSize: 1,\n        resolution: settings.FILTER_RESOLUTION,\n    };\n\n    /** Hide the contents, only show the shadow. */\n    public shadowOnly: boolean;\n\n    /**\n     * Angle of the shadow in degrees\n     * @deprecated since 5.3.0\n     * @see DropShadowFilter#offset\n     */\n    public angle = 45;\n\n    private _offset: ObservablePoint;\n    private _distance = 5;\n    private _tintFilter: Filter;\n    private _blurFilter: KawaseBlurFilter;\n    protected _resolution: number = settings.FILTER_RESOLUTION;\n\n    /**\n     * @param {object} [options] - Filter options\n     * @param {number} [options.offset={x: 4, y: 4}] - Offset of the shadow\n     * @param {number} [options.color=0x000000] - Color of the shadow\n     * @param {number} [options.alpha=0.5] - Alpha of the shadow\n     * @param {boolean} [options.shadowOnly=false] - Whether render shadow only\n     * @param {number} [options.blur=2] - Sets the strength of the Blur properties simultaneously\n     * @param {number} [options.quality=3] - The quality of the Blur filter.\n     * @param {number[]} [options.kernels=null] - The kernels of the Blur filter.\n     * @param {number|number[]|PIXI.Point} [options.pixelSize=1] - the pixelSize of the Blur filter.\n     * @param {number} [options.resolution=PIXI.settings.FILTER_RESOLUTION] - The resolution of the Blur filter.\n     */\n    constructor(options?: Partial<DropShadowFilterOptions>)\n    {\n        super();\n\n        const opt: DropShadowFilterOptions = options\n            ? { ...DropShadowFilter.defaults, ...options }\n            : DropShadowFilter.defaults;\n\n        const { kernels, blur, quality, pixelSize, resolution } = opt;\n\n        this._offset = new ObservablePoint(this._updatePadding, this);\n        this._tintFilter = new Filter(vertex, fragment);\n        this._tintFilter.uniforms.color = new Float32Array(4);\n        this._tintFilter.uniforms.shift = this._offset;\n        this._tintFilter.resolution = resolution;\n        this._blurFilter = kernels\n            ? new KawaseBlurFilter(kernels)\n            : new KawaseBlurFilter(blur, quality);\n\n        this.pixelSize = pixelSize;\n        this.resolution = resolution;\n\n        const { shadowOnly, rotation, distance, offset, alpha, color } = opt;\n\n        this.shadowOnly = shadowOnly;\n\n        // Check for deprecated options first\n        if (rotation !== undefined && distance !== undefined)\n        {\n            this.rotation = rotation;\n            this.distance = distance;\n        }\n        else\n        {\n            this.offset = offset;\n        }\n\n        this.alpha = alpha;\n        this.color = color;\n    }\n\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clear: CLEAR_MODES): void\n    {\n        const target = filterManager.getFilterTexture();\n\n        this._tintFilter.apply(filterManager, input, target, 1);\n        this._blurFilter.apply(filterManager, target, output, clear);\n\n        if (this.shadowOnly !== true)\n        {\n            filterManager.applyFilter(this, input, output, 0);\n        }\n\n        filterManager.returnFilterTexture(target);\n    }\n\n    /**\n     * Recalculate the proper padding amount.\n     * @private\n     */\n    private _updatePadding()\n    {\n        const offsetPadding = Math.max(\n            Math.abs(this._offset.x),\n            Math.abs(this._offset.y)\n        );\n\n        this.padding = offsetPadding + (this.blur * 2);\n    }\n\n    /**\n     * Update the transform matrix of offset angle.\n     * @private\n     * @deprecated\n     */\n    private _updateShift()\n    {\n        this._tintFilter.uniforms.shift.set(\n            this.distance * Math.cos(this.angle),\n            this.distance * Math.sin(this.angle),\n        );\n    }\n\n    /**\n     * Set the offset position of the drop-shadow relative to the original image.\n     * @type {PIXI.IPointData}\n     * @default {x: 4, y: 4}\n     */\n    public set offset(value: IPointData)\n    {\n        this._offset.copyFrom(value);\n        this._updatePadding();\n    }\n    public get offset(): ObservablePoint\n    {\n        return this._offset;\n    }\n\n    /**\n     * The resolution of the filter.\n     * @default PIXI.settings.FILTER_RESOLUTION\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n    set resolution(value: number)\n    {\n        this._resolution = value;\n\n        if (this._tintFilter)\n        {\n            this._tintFilter.resolution = value;\n        }\n        if (this._blurFilter)\n        {\n            this._blurFilter.resolution = value;\n        }\n    }\n\n    /**\n     * Distance offset of the shadow\n     * @default 5\n     * @deprecated since 5.3.0\n     * @see DropShadowFilter#offset\n     */\n    get distance(): number\n    {\n        return this._distance;\n    }\n    set distance(value: number)\n    {\n        utils.deprecation('5.3.0', 'DropShadowFilter distance is deprecated, use offset');\n        this._distance = value;\n        this._updatePadding();\n        this._updateShift();\n    }\n\n    /**\n     * The angle of the shadow in degrees\n     * @deprecated since 5.3.0\n     * @see DropShadowFilter#offset\n     */\n    get rotation(): number\n    {\n        return this.angle / DEG_TO_RAD;\n    }\n    set rotation(value: number)\n    {\n        utils.deprecation('5.3.0', 'DropShadowFilter rotation is deprecated, use offset');\n        this.angle = value * DEG_TO_RAD;\n        this._updateShift();\n    }\n\n    /**\n     * The alpha of the shadow\n     * @default 1\n     */\n    get alpha(): number\n    {\n        return this._tintFilter.uniforms.alpha;\n    }\n    set alpha(value: number)\n    {\n        this._tintFilter.uniforms.alpha = value;\n    }\n\n    /**\n     * The color of the shadow.\n     * @default 0x000000\n     */\n    get color(): number\n    {\n        return utils.rgb2hex(this._tintFilter.uniforms.color);\n    }\n    set color(value: number)\n    {\n        utils.hex2rgb(value, this._tintFilter.uniforms.color);\n    }\n\n    /**\n     * Sets the kernels of the Blur Filter\n     */\n    get kernels(): number[]\n    {\n        return this._blurFilter.kernels;\n    }\n    set kernels(value: number[])\n    {\n        this._blurFilter.kernels = value;\n    }\n\n    /**\n     * The blur of the shadow\n     * @default 2\n     */\n    get blur(): number\n    {\n        return this._blurFilter.blur;\n    }\n    set blur(value: number)\n    {\n        this._blurFilter.blur = value;\n        this._updatePadding();\n    }\n\n    /**\n     * Sets the quality of the Blur Filter\n     * @default 4\n     */\n    get quality(): number\n    {\n        return this._blurFilter.quality;\n    }\n    set quality(value: number)\n    {\n        this._blurFilter.quality = value;\n    }\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter\n     *\n     * @member {number|number[]|PIXI.Point}\n     * @default 1\n     */\n    get pixelSize(): PixelSizeValue\n    {\n        return this._blurFilter.pixelSize;\n    }\n    set pixelSize(value: PixelSizeValue)\n    {\n        this._blurFilter.pixelSize = value;\n    }\n}\n\nexport { DropShadowFilter };\nexport type { DropShadowFilterOptions };\n"],
  "mappings": "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",
  "names": ["KawaseBlurFilter", "Filter", "blur", "quality", "clamp", "vertex", "fragmentClamp", "fragment", "Point", "filterManager", "input", "output", "clear", "uvX", "uvY", "offset", "renderTarget", "source", "target", "tmp", "last", "i", "acc", "v", "kernels", "k", "step", "value", "_DropShadowFilter", "Filter", "options", "settings", "opt", "__spreadValues", "kernels", "blur", "quality", "pixelSize", "resolution", "ObservablePoint", "vertex", "fragment", "KawaseBlurFilter", "shadowOnly", "rotation", "distance", "offset", "alpha", "color", "filterManager", "input", "output", "clear", "target", "offsetPadding", "value", "utils", "DEG_TO_RAD", "DropShadowFilter"]
}
